// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -module-name VodQaSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Combine
import ContactsUI
import CoreText
import DeveloperToolsSupport
import Foundation
import Photos
import SDWebImageSwiftUI
import SVGKit
import Swift
import SwiftUI
import UIKit
@_exported import VodQaSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class CheckTransactionRepository {
  public init(api: any VodQaSDK.CheckTransactionAPIProtocol = CheckTransactionAPI())
  public func checkTransaction(reference: Swift.String) async throws -> VodQaSDK.CheckTransactionResponse
  @objc deinit
}
final public class CountriesRepository {
  public init(api: any VodQaSDK.CountriesAPIProtocol = CountriesAPI())
  final public func getCountries(mobileNumber: Swift.String, serviceCode: Swift.String) async throws -> [VodQaSDK.CountryItem]
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct TopUpView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK9TopUpViewV4bodyQrvp", 0) __
}

public struct VodQaSDK {
  @_Concurrency.MainActor public static func makeTopUpController(secretKey: Swift.String, serviceCode: Swift.String, mobileNumber: Swift.String, iPayCustomerID: Swift.String) -> UIKit.UIViewController
  @_Concurrency.MainActor public static func makeOpenSavedController(secretKey: Swift.String, serviceCode: Swift.String, mobileNumber: Swift.String, iPayCustomerID: Swift.String, savedBillID: Swift.String) -> UIKit.UIViewController
}
public enum FontLoader {
  public static func registerFonts()
}
public protocol ProvidersAPIProtocol {
  func fetchProviders(request: VodQaSDK.ProvidersRequest) async throws -> VodQaSDK.ProvidersResponse
}
public class ProvidersAPI : VodQaSDK.ProvidersAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func fetchProviders(request: VodQaSDK.ProvidersRequest) async throws -> VodQaSDK.ProvidersResponse
  @objc deinit
}
@_Concurrency.MainActor public class ProductsViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($products) @_Concurrency.MainActor public var products: [VodQaSDK.ProductItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $products: Combine.Published<[VodQaSDK.ProductItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoadingProducts) @_Concurrency.MainActor public var isLoadingProducts: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoadingProducts: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productsError) @_Concurrency.MainActor public var productsError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $productsError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedProduct) @_Concurrency.MainActor public var selectedProduct: VodQaSDK.ProductItem? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $selectedProduct: Combine.Published<VodQaSDK.ProductItem?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($saveRecharge) @_Concurrency.MainActor public var saveRecharge: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $saveRecharge: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($receiverMobileNumber) @_Concurrency.MainActor public var receiverMobileNumber: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $receiverMobileNumber: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($countryIso) @_Concurrency.MainActor public var countryIso: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $countryIso: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($countryFlagUrl) @_Concurrency.MainActor public var countryFlagUrl: Foundation.URL {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $countryFlagUrl: Combine.Published<Foundation.URL>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($countryName) @_Concurrency.MainActor public var countryName: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $countryName: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($providerCode) @_Concurrency.MainActor public var providerCode: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $providerCode: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($providerLogoUrl) @_Concurrency.MainActor public var providerLogoUrl: Foundation.URL {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $providerLogoUrl: Combine.Published<Foundation.URL>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($providerName) @_Concurrency.MainActor public var providerName: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $providerName: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productSku) @_Concurrency.MainActor public var productSku: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $productSku: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mobileNumber) @_Concurrency.MainActor public var mobileNumber: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $mobileNumber: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($serviceCode) @_Concurrency.MainActor public var serviceCode: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $serviceCode: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($iPayCustomerID) @_Concurrency.MainActor public var iPayCustomerID: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $iPayCustomerID: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($dismissMode) @_Concurrency.MainActor public var dismissMode: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $dismissMode: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(saveRecharge: Swift.String, receiverMobileNumber: Swift.String, countryIso: Swift.String, countryFlagUrl: Foundation.URL, countryName: Swift.String, providerCode: Swift.String, providerLogoUrl: Foundation.URL, providerName: Swift.String, productSku: Swift.String, mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String, dismissMode: Swift.String)
  @_Concurrency.MainActor public func loadProducts() async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SavedBillRequest : Swift.Encodable {
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct SavedBillResponse : Swift.Decodable {
  public let status: Swift.String
  public let items: [VodQaSDK.SavedBillItem]
  public init(from decoder: any Swift.Decoder) throws
}
public struct SavedBillItem : Swift.Identifiable, Swift.Decodable, Swift.Sendable {
  public let id: Swift.String
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public let targetIdentifier: Swift.String
  public let countryIso2: Swift.String
  public let countryIso3: Swift.String
  public let countryName: Swift.String
  public let countryFlagUrl: Foundation.URL
  public let providerCode: Swift.String
  public let providerName: Swift.String
  public let providerImgUrl: Foundation.URL
  public let productSku: Swift.String
  public let productDisplayText: Swift.String
  public let serviceCode: Swift.String
  public let amount: Swift.String
  public let currency: Swift.String
  public typealias ID = Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public class IPayOtpRepository {
  public init(api: any VodQaSDK.IPayOtpAPIProtocol = IPayOtpAPI())
  public func sendOtp(mobileNumber: Swift.String, iPayCustomerID: Swift.String, targetNumber: Swift.String, serviceCode: Swift.String, productSku: Swift.String, saveRecharge: Swift.String) async throws -> VodQaSDK.IPayOtpResponse
  @objc deinit
}
public class IPayOrderRepository {
  public init(api: any VodQaSDK.IPayOrderAPIProtocol = IPayOrderAPI())
  public func placeOrder(otp: Swift.String, transactionId: Swift.String) async throws -> VodQaSDK.IPayOrderResponse
  @objc deinit
}
public protocol IPayOrderAPIProtocol {
  func placeOrder(otp: Swift.String, transactionId: Swift.String) async throws -> VodQaSDK.IPayOrderResponse
}
public class IPayOrderAPI : VodQaSDK.IPayOrderAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func placeOrder(otp: Swift.String, transactionId: Swift.String) async throws -> VodQaSDK.IPayOrderResponse
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct OpenSavedTopupView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(vm: VodQaSDK.OpenSavedTopupViewModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK18OpenSavedTopupViewV4bodyQrvp", 0) __
}
public struct CheckTransactionRequest : Swift.Codable {
  public let transactionReferenceNo: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckTransactionResponse : Swift.Decodable, Swift.Sendable {
  public let status: Swift.String
  public let transaction: VodQaSDK.CheckTransaction
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckTransaction : Swift.Decodable, Swift.Sendable {
  public let id: Swift.String
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public let targetIdentifier: Swift.String
  public let countryIso2: Swift.String
  public let countryIso3: Swift.String
  public let countryName: Swift.String
  public let countryFlagUrl: Foundation.URL
  public let providerCode: Swift.String
  public let providerName: Swift.String
  public let providerImgUrl: Foundation.URL
  public let productSku: Swift.String
  public let productDisplayText: Swift.String
  public let serviceCode: Swift.String
  public let amount: Swift.String
  public let currency: Swift.String
  public let billingRef: Swift.String
  public let status: Swift.String
  public let statusMessage: Swift.String
  public let reciptParams: Swift.String
  public let dateTime: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductsRequest : Swift.Codable {
  public let mobileNumber: Swift.String
  public let serviceCode: Swift.String
  public let countryCode: Swift.String
  public let providerCode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductItem : Swift.Identifiable, Swift.Codable, Swift.Sendable {
  public var id: Foundation.UUID
  public let skuCode: Swift.String
  public let providerCode: Swift.String
  public let countryIso: Swift.String
  public let displayText: Swift.String
  public let sendValue: Swift.String
  public let sendCurrencyIso: Swift.String
  public init(id: Foundation.UUID = .init(), skuCode: Swift.String, providerCode: Swift.String, countryIso: Swift.String, displayText: Swift.String, sendValue: Swift.String, sendCurrencyIso: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ProductsResponse : Swift.Codable {
  public let status: Swift.String
  public let items: [VodQaSDK.ProductItem]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class ProvidersRepository {
  public init(api: any VodQaSDK.ProvidersAPIProtocol = ProvidersAPI())
  public func getProviders(mobileNumber: Swift.String, serviceCode: Swift.String, countryCode: Swift.String) async throws -> [VodQaSDK.ProviderItem]
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct SegmentTabView : SwiftUICore.View {
  public enum Tab {
    case new, saved
    public static func == (a: VodQaSDK.SegmentTabView.Tab, b: VodQaSDK.SegmentTabView.Tab) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<VodQaSDK.SegmentTabView.Tab>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK14SegmentTabViewV4bodyQrvp", 0) __
}
public protocol SavedBillAPIProtocol {
  func fetchSavedBill(mobileNumber: Swift.String, iPayCustomerID: Swift.String, id: Swift.String) async throws -> VodQaSDK.SavedBillResponse
}
public class SavedBillAPI : VodQaSDK.SavedBillAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func fetchSavedBill(mobileNumber: Swift.String, iPayCustomerID: Swift.String, id: Swift.String) async throws -> VodQaSDK.SavedBillResponse
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HTTPClient {
  nonisolated(unsafe) public static let shared: VodQaSDK.HTTPClient
  final public func initialize(secretKey: Swift.String)
  final public func request<T>(_ endpoint: any VodQaSDK.Endpoint) async throws -> T where T : Swift.Decodable
  @objc deinit
}
@_Concurrency.MainActor public class OtpViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($transactionId) @_Concurrency.MainActor public var transactionId: Swift.Int? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $transactionId: Combine.Published<Swift.Int?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoadingIPayOtp) @_Concurrency.MainActor public var isLoadingIPayOtp: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoadingIPayOtp: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($iPayOtpError) @_Concurrency.MainActor public var iPayOtpError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $iPayOtpError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($code) @_Concurrency.MainActor public var code: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $code: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showMsgImageType) @_Concurrency.MainActor public var showMsgImageType: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $showMsgImageType: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($completedTransaction) @_Concurrency.MainActor public var completedTransaction: VodQaSDK.CheckTransaction? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $completedTransaction: Combine.Published<VodQaSDK.CheckTransaction?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($otpError) @_Concurrency.MainActor public var otpError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $otpError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isSubmitting) @_Concurrency.MainActor public var isSubmitting: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isSubmitting: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor final public let saveRecharge: Swift.String
  @_Concurrency.MainActor final public let receiverMobileNumber: Swift.String
  @_Concurrency.MainActor final public let countryIso: Swift.String
  @_Concurrency.MainActor final public let countryFlagUrl: Foundation.URL
  @_Concurrency.MainActor final public let countryName: Swift.String
  @_Concurrency.MainActor final public let providerCode: Swift.String
  @_Concurrency.MainActor final public let providerLogoUrl: Foundation.URL
  @_Concurrency.MainActor final public let providerName: Swift.String
  @_Concurrency.MainActor final public let product: VodQaSDK.ProductItem
  @_Concurrency.MainActor final public let mobileNumber: Swift.String
  @_Concurrency.MainActor final public let serviceCode: Swift.String
  @_Concurrency.MainActor final public let iPayCustomerID: Swift.String
  @_Concurrency.MainActor public init(saveRecharge: Swift.String, receiverMobileNumber: Swift.String, countryIso: Swift.String, countryFlagUrl: Foundation.URL, countryName: Swift.String, providerCode: Swift.String, providerLogoUrl: Foundation.URL, providerName: Swift.String, product: VodQaSDK.ProductItem, mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String)
  @_Concurrency.MainActor public func requestOtp() async
  @_Concurrency.MainActor public func submitOtpAndPoll() async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class SavedBillsRepository {
  public init(api: any VodQaSDK.SavedBillsAPIProtocol = SavedBillsAPI())
  public func getSavedBills(mobileNumber: Swift.String, iPayCustomerID: Swift.String) async throws -> [VodQaSDK.SavedBillsItem]
  @objc deinit
}
public struct ApiError : Swift.Decodable, Swift.Sendable {
  public let status: Swift.Int?
  public let error: Swift.String?
  public let message: Swift.String?
  public let messages: VodQaSDK.ApiError.Messages?
  public struct Messages : Swift.Decodable, Swift.Sendable {
    public let error: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(status: Swift.Int?, error: Swift.String?, message: Swift.String?, messages: VodQaSDK.ApiError.Messages?)
  public init(from decoder: any Swift.Decoder) throws
  public func userMessage() -> Swift.String
}
public protocol ProductsAPIProtocol {
  func fetchProducts(request: VodQaSDK.ProductsRequest) async throws -> VodQaSDK.ProductsResponse
}
public class ProductsAPI : VodQaSDK.ProductsAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func fetchProducts(request: VodQaSDK.ProductsRequest) async throws -> VodQaSDK.ProductsResponse
  @objc deinit
}
public protocol CheckTransactionAPIProtocol {
  func check(reference: Swift.String) async throws -> VodQaSDK.CheckTransactionResponse
}
public class CheckTransactionAPI : VodQaSDK.CheckTransactionAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func check(reference: Swift.String) async throws -> VodQaSDK.CheckTransactionResponse
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct ProductsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(saveRecharge: Swift.String, receiverMobileNumber: Swift.String, countryIso: Swift.String, countryFlagUrl: Foundation.URL, countryName: Swift.String, providerCode: Swift.String, providerLogoUrl: Foundation.URL, providerName: Swift.String, productSku: Swift.String, mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String, dismissMode: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK12ProductsViewV4bodyQrvp", 0) __
}

public struct DeleteBillRequest : Swift.Encodable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DeleteBillResponse : Swift.Decodable, Swift.Sendable {
  public let status: Swift.String
  public let message: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public protocol IPayOtpAPIProtocol {
  func requestOtp(_ request: VodQaSDK.IPayOtpRequest) async throws -> VodQaSDK.IPayOtpResponse
}
public class IPayOtpAPI : VodQaSDK.IPayOtpAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func requestOtp(_ request: VodQaSDK.IPayOtpRequest) async throws -> VodQaSDK.IPayOtpResponse
  @objc deinit
}
public protocol DeleteBillAPIProtocol {
  func deleteBill(id: Swift.String) async throws -> VodQaSDK.DeleteBillResponse
}
public class DeleteBillAPI : VodQaSDK.DeleteBillAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func deleteBill(id: Swift.String) async throws -> VodQaSDK.DeleteBillResponse
  @objc deinit
}
public enum NetworkError : Swift.Error, Swift.Sendable {
  case invalidURL
  case invalidResponse
  case apiError(code: Swift.Int, error: VodQaSDK.ApiError)
  case decodingError(any Swift.Error)
  case underlying(any Swift.Error)
}
public enum HTTPMethod : Swift.String {
  case get, post, put, delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Endpoint {
  var path: Swift.String { get }
  var method: VodQaSDK.HTTPMethod { get }
  var headers: [Swift.String : Swift.String]? { get }
  var queryItems: [Foundation.URLQueryItem]? { get }
  var body: Foundation.Data? { get }
}
public struct ProvidersRequest : Swift.Codable {
  public let mobileNumber: Swift.String
  public let serviceCode: Swift.String
  public let countryCode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProviderItem : Swift.Identifiable, Swift.Decodable, Swift.Sendable {
  public var id: Foundation.UUID
  public let providerCode: Swift.String
  public let countryIso: Swift.String
  public let name: Swift.String
  public let validationRegex: Swift.String
  public let logoUrl: Foundation.URL
  public typealias ID = Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProvidersResponse : Swift.Decodable {
  public let status: Swift.String
  public let items: [VodQaSDK.ProviderItem]
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct ReviewTopUpView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let saveRecharge: Swift.String
  @_Concurrency.MainActor @preconcurrency public let receiverMobileNumber: Swift.String
  @_Concurrency.MainActor @preconcurrency public let countryIso: Swift.String
  @_Concurrency.MainActor @preconcurrency public let countryName: Swift.String
  @_Concurrency.MainActor @preconcurrency public let countryFlagUrl: Foundation.URL
  @_Concurrency.MainActor @preconcurrency public let providerCode: Swift.String
  @_Concurrency.MainActor @preconcurrency public let providerName: Swift.String
  @_Concurrency.MainActor @preconcurrency public let providerLogoUrl: Foundation.URL
  @_Concurrency.MainActor @preconcurrency public let mobileNumber: Swift.String
  @_Concurrency.MainActor @preconcurrency public let serviceCode: Swift.String
  @_Concurrency.MainActor @preconcurrency public let iPayCustomerID: Swift.String
  @_Concurrency.MainActor @preconcurrency public let product: VodQaSDK.ProductItem
  @_Concurrency.MainActor @preconcurrency public init(saveRecharge: Swift.String, receiverMobileNumber: Swift.String, countryIso: Swift.String, countryFlagUrl: Foundation.URL, countryName: Swift.String, providerCode: Swift.String, providerLogoUrl: Foundation.URL, providerName: Swift.String, product: VodQaSDK.ProductItem, mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK15ReviewTopUpViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct DeletionSuccessModalView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK24DeletionSuccessModalViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor @preconcurrency public struct CountryPicker : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var onSelect: ((VodQaSDK.CountryItem) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(vm: VodQaSDK.TopUpViewModel, onSelect: ((VodQaSDK.CountryItem) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK13CountryPickerV4bodyQrvp", 0) __
}
public protocol SavedBillsAPIProtocol {
  func getSavedBills(mobileNumber: Swift.String, iPayCustomerID: Swift.String) async throws -> VodQaSDK.SavedBillsResponse
}
public class SavedBillsAPI : VodQaSDK.SavedBillsAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  public func getSavedBills(mobileNumber: Swift.String, iPayCustomerID: Swift.String) async throws -> VodQaSDK.SavedBillsResponse
  @objc deinit
}
public struct IPayOtpRequest : Swift.Codable {
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public let targetNumber: Swift.String
  public let serviceCode: Swift.String
  public let productSku: Swift.String
  public let saveRecharge: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IPayOtpResponse : Swift.Decodable, Swift.Sendable {
  public let status: Swift.String
  public let transactionId: Swift.Int?
  public let message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReceiptData {
  public let amount: Swift.String
  public let dateTime: Swift.String
  public let type: Swift.String
  public let number: Swift.String
  public let operatorName: Swift.String
  public let refId: Swift.String
}
public class SavedBillRepository {
  public init(api: any VodQaSDK.SavedBillAPIProtocol = SavedBillAPI())
  public func getSavedBill(mobileNumber: Swift.String, iPayCustomerID: Swift.String, id: Swift.String) async throws -> VodQaSDK.SavedBillItem
  @objc deinit
}
public protocol CountriesAPIProtocol {
  func fetchCountries(request: VodQaSDK.CountriesRequest) async throws -> VodQaSDK.CountriesResponse
}
final public class CountriesAPI : VodQaSDK.CountriesAPIProtocol {
  public init(client: VodQaSDK.HTTPClient = .shared)
  final public func fetchCountries(request: VodQaSDK.CountriesRequest) async throws -> VodQaSDK.CountriesResponse
  @objc deinit
}
@_Concurrency.MainActor public class OpenSavedTopupViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($item) @_Concurrency.MainActor public var item: VodQaSDK.SavedBillItem? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $item: Combine.Published<VodQaSDK.SavedBillItem?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoading) @_Concurrency.MainActor public var isLoading: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoading: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($error) @_Concurrency.MainActor public var error: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $error: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(serviceCode: Swift.String, mobileNumber: Swift.String, iPayCustomerID: Swift.String, savedBillID: Swift.String)
  @_Concurrency.MainActor public func load() async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct CountriesRequest : Swift.Codable {
  public let mobileNumber: Swift.String
  public let serviceCode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CountryItem : Swift.Identifiable, Swift.Codable, Swift.Sendable {
  public var id: Foundation.UUID
  public let countryIso: Swift.String
  public let name: Swift.String
  public let prefix: Swift.String
  public let minimumLength: Swift.String
  public let maximumLength: Swift.String
  public let flagUrl: Foundation.URL
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CountriesResponse : Swift.Codable {
  public let status: Swift.String
  public let items: [VodQaSDK.CountryItem]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class DeleteBillRepository {
  public init(api: any VodQaSDK.DeleteBillAPIProtocol = DeleteBillAPI())
  public func deleteBill(id: Swift.String) async throws -> VodQaSDK.DeleteBillResponse
  @objc deinit
}
final public class ProductsRepository {
  public init(api: any VodQaSDK.ProductsAPIProtocol = ProductsAPI())
  final public func getProducts(mobileNumber: Swift.String, serviceCode: Swift.String, countryCode: Swift.String, providerCode: Swift.String) async throws -> [VodQaSDK.ProductItem]
  @objc deinit
}
@_Concurrency.MainActor public class TopUpViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($countries) @_Concurrency.MainActor public var countries: [VodQaSDK.CountryItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $countries: Combine.Published<[VodQaSDK.CountryItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($filteredCountries) @_Concurrency.MainActor public var filteredCountries: [VodQaSDK.CountryItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $filteredCountries: Combine.Published<[VodQaSDK.CountryItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoadingCountries) @_Concurrency.MainActor public var isLoadingCountries: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoadingCountries: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($countriesError) @_Concurrency.MainActor public var countriesError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $countriesError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mobileMaxLength) @_Concurrency.MainActor public var mobileMaxLength: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $mobileMaxLength: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mobileMinLength) @_Concurrency.MainActor public var mobileMinLength: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $mobileMinLength: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($providers) @_Concurrency.MainActor public var providers: [VodQaSDK.ProviderItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $providers: Combine.Published<[VodQaSDK.ProviderItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoadingProviders) @_Concurrency.MainActor public var isLoadingProviders: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoadingProviders: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($providersError) @_Concurrency.MainActor public var providersError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $providersError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($savedBills) @_Concurrency.MainActor public var savedBills: [VodQaSDK.SavedBillsItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $savedBills: Combine.Published<[VodQaSDK.SavedBillsItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoadingSavedBills) @_Concurrency.MainActor public var isLoadingSavedBills: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isLoadingSavedBills: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($savedBillsError) @_Concurrency.MainActor public var savedBillsError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $savedBillsError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isDeletingBill) @_Concurrency.MainActor public var isDeletingBill: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $isDeletingBill: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($deleteBillError) @_Concurrency.MainActor public var deleteBillError: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $deleteBillError: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($deleteSuccessMessage) @_Concurrency.MainActor public var deleteSuccessMessage: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $deleteSuccessMessage: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($serviceCode) @_Concurrency.MainActor public var serviceCode: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $serviceCode: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mobileNumber) @_Concurrency.MainActor public var mobileNumber: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $mobileNumber: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($iPayCustomerID) @_Concurrency.MainActor public var iPayCustomerID: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor public var $iPayCustomerID: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public init(serviceCode: Swift.String, mobileNumber: Swift.String, iPayCustomerID: Swift.String)
  @_Concurrency.MainActor public func loadCountries() async
  @_Concurrency.MainActor public func filterCountries(by text: Swift.String)
  @_Concurrency.MainActor public func loadProviders(for countryIso: Swift.String) async
  @_Concurrency.MainActor public func loadSavedBills() async
  @_Concurrency.MainActor public func deleteSavedBill(_ bill: VodQaSDK.SavedBillsItem) async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct OtpView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(saveRecharge: Swift.String, receiverMobileNumber: Swift.String, countryIso: Swift.String, countryFlagUrl: Foundation.URL, countryName: Swift.String, providerCode: Swift.String, providerLogoUrl: Foundation.URL, providerName: Swift.String, product: VodQaSDK.ProductItem, mobileNumber: Swift.String, serviceCode: Swift.String, iPayCustomerID: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK7OtpViewV4bodyQrvp", 0) __
}

public struct IPayOrderRequest : Swift.Codable {
  public let otp: Swift.String
  public let transactionId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IPayOrderResponse : Swift.Decodable, Swift.Sendable {
  public let status: Swift.String
  public let transactionReference: Swift.String?
  public let message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct ReceiptModalView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8VodQaSDK16ReceiptModalViewV4bodyQrvp", 0) __
}

public class SDKCoordinator : Foundation.ObservableObject {
  public init(closeSDK: @escaping @_Concurrency.MainActor @Sendable () -> Swift.Void)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SavedBillsRequest : Swift.Encodable {
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct SavedBillsResponse : Swift.Decodable {
  public let status: Swift.String
  public let items: [VodQaSDK.SavedBillsItem]
  public init(from decoder: any Swift.Decoder) throws
}
public struct SavedBillsItem : Swift.Identifiable, Swift.Decodable, Swift.Sendable {
  public let id: Swift.String
  public let mobileNumber: Swift.String
  public let iPayCustomerID: Swift.String
  public let targetIdentifier: Swift.String
  public let countryIso2: Swift.String
  public let countryIso3: Swift.String
  public let countryName: Swift.String
  public let countryFlagUrl: Foundation.URL
  public let providerCode: Swift.String
  public let providerName: Swift.String
  public let providerImgUrl: Foundation.URL
  public let productSku: Swift.String
  public let productDisplayText: Swift.String
  public let serviceCode: Swift.String
  public let amount: Swift.String
  public let currency: Swift.String
  public typealias ID = Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
extension VodQaSDK.TopUpView : Swift.Sendable {}
extension VodQaSDK.ProductsViewModel : Swift.Sendable {}
extension VodQaSDK.OpenSavedTopupView : Swift.Sendable {}
extension VodQaSDK.SegmentTabView : Swift.Sendable {}
extension VodQaSDK.SegmentTabView.Tab : Swift.Equatable {}
extension VodQaSDK.SegmentTabView.Tab : Swift.Hashable {}
extension VodQaSDK.OtpViewModel : Swift.Sendable {}
extension VodQaSDK.ProductsView : Swift.Sendable {}
extension VodQaSDK.HTTPMethod : Swift.Equatable {}
extension VodQaSDK.HTTPMethod : Swift.Hashable {}
extension VodQaSDK.HTTPMethod : Swift.RawRepresentable {}
extension VodQaSDK.ReviewTopUpView : Swift.Sendable {}
extension VodQaSDK.DeletionSuccessModalView : Swift.Sendable {}
extension VodQaSDK.CountryPicker : Swift.Sendable {}
extension VodQaSDK.OpenSavedTopupViewModel : Swift.Sendable {}
extension VodQaSDK.TopUpViewModel : Swift.Sendable {}
extension VodQaSDK.OtpView : Swift.Sendable {}
extension VodQaSDK.ReceiptModalView : Swift.Sendable {}
